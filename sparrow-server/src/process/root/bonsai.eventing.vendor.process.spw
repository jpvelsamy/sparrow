process "bonsai.eventing.customer.process"
{
	try
	{
			assign as "last_ran_date" source "${sor-db}" using
			{"
				SELECT end_date FROM eventin_audit where end_date is not null order_by id desc limit 1;
			"}
	
			transform as "add_audit" on "${sor-db}" using
			{"
				INSERT INTO eventing_audit (process_id, start_date) VALUES (${process-id}, NOW());
			"}  
	
			transform as "generate-text-vendor" on "${sor-db}" using
		 	{"
				CREATE TABLE ${process-id}_sms_data_vendor SELECT a.due_date, b.full_name as juno_customer_name, b.phone_number as juno_customer_number, c.name as juno_vendor_name, c.phone_number as juno_vendor_number, 
				c.alternate_number as juno_vendor_number_alt, d.sms_template as text_ from
				order_info a inner join customer b on a.customer_id=b.id left outer join vendor c on b.vendor_id=c.id inner join sms_template d on a.state_string=d.status
				and a.z_state_string=d.z_status where d.template_type='vendor' and a.updated_date>date(${last_ran_date.end_date});
				
				UPDATE ${process-id}_sms_data_vendor SET text_=replace(text_,'${juno_due_date}',due_date);
				UPDATE ${process-id}_sms_data_vendor SET text_=replace(text_,'${juno_site_visit_date}',due_date);
				UPDATE ${process-id}_sms_data_vendor SET text_=replace(text_,'${juno_customer_name}',juno_customer_name);
				UPDATE ${process-id}_sms_data_vendor SET text_=replace(text_,'${juno_vendor_name}',juno_vendor_name);
				UPDATE ${process-id}_sms_data_vendor SET text_=replace(text_,'${juno_vendor_number}',juno_vendor_number);
				UPDATE ${process-id}_sms_data_vendor SET text_=replace(text_,'${juno_vendor_number_alt}',juno_vendor_number_alt);
			"}  on-condition if  "${runtextvendor}"=="true"
			
			assign as "vendor_row_status" source "${sor-db}" using
			{"
				SELECT if(count(*)>0,'true','else') as exists eFROM ${process-id}_sms_data_vendor;
			"}
			
			abort name="abort_on_nodata" message="" on-condition "if vendor_row_status.exists"=="false"
			
			c2sms as "send-text-vendor" with-user userid="" secured-by "" from-source "${sor-db}" using
			{"
				SELECT juno_customer_number, juno_customer_name, text_ from ${process-id}_sms_data_vendor;
			"} on-condition if  "${runtextcustomer}"=="true"
	
		 	transform as "create-calendar-event" on "${sor-db}" using
			{
				"INSERT INTO calendar_details (event_interval, event_start, event_end, event_alert_time, event_title, description, event_location, batch_id, updated_date)
				SELECT 0, leadgen_date as event_start, date_add(leadgen_date, interval 1 day) as event_end, time(leadgen_date) as event_alert_time, 
				concat('First call for ', name,'-',mobile) as event_title, intent_metadata as description, targeted_city as event_location, ${process-id}, NOW() 
				FROM leads_syfd where batch_id=${process-id};"				
			}on-condition if  "${runcalendar}"=="true"
			
		 	gcalendar as "update-google-calendar"  
			through-account "${gaccountid}" 
			secured-by "${gprivatekey}" 
			with-key "${p12filepath}" 
			for-project "${gcloud-project-name}" 
			on-behalf-of "${impersonated-user}" 
			from-source "${sor-db}" using
			{"
				select '${calendarid}' as event_calendar_id, event_interval, event_start, event_end, event_alert_time, event_title, description, event_location from calendar_details where batch_id=${process-id};   
			"} on-condition if  "${runcalendar}"=="true"
	
	}
	catch
	{
		
	}
	finally
	{
			transform as "drop-temp-tables" on "${sor-db}" using
		 	{"
		 		DROP table if exists ${process-id}_sms_data_vendor;
		 		DROP table if exists ${process-id}_sms_data_customer;
		 	"}
		 	
		 	transform as "update-audit" on "${sor-db}" using
			{"
				UPDATE eventing_audit set end_date=NOW() WHERE process_id=${process-id}
			"}  
	}
}