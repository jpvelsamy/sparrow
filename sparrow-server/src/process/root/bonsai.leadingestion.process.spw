process "bonsai.leadingestion.process"
{
	try
	{
			fblc as "get-leads" secured-by "${accesstoken}" 
			with-key "${secret-key}"   
			through-user "${user-id}" 
			for-campaign "${campaign-id-list}" into
			"${sor-db}" using
			{
					"SELECT name, email, mobile, alt_mobile, locality, targeted_city, leadsource_campaign, leadsource_channel, company, 
					leadgen_date, coa_aprox, profession, budget, leadsource_metadata, intent_metadata, batch_id, updated_date"
			} on-condition if  "${runfbcl}"=="true"
			
			transform as "cleanup_underscore_on_incoming_leads" on "${sor-db}" using
			{
				"update leads_soft set intent_metadata=replace(intent_metadata,'_','') where batch_id=${process-id};"
			}
			
			transform as "add-leads-to-staging" on "${sor-db}" using
			{"
				   INSERT INTO leads_syfd (name, email, mobile, alt_mobile, 
					locality, targeted_city, leadsource_campaign, leadsource_channel, company, leadgen_date, 
					coa_aprox, profession, budget, leadsource_metadata, intent_metadata, batch_id, updated_date) 					
					SELECT  a.name,  a.email,  a.mobile,  a.alt_mobile,  a.locality,  a.targeted_city,  
					a.leadsource_campaign,  a.leadsource_channel,  a.company,  a.leadgen_date,  a.coa_aprox,  
					a.profession, a.budget, a.leadsource_metadata,  a.intent_metadata,  ${process-id}, now() FROM leads_soft a 
					LEFT OUTER JOIN leads_syfd b ON a.mobile=b.mobile WHERE b.mobile IS NULL and a.batch_id=${process-id} GROUP BY a.mobile having count(*)>=1;
			"}
			
			transform as "cleanup_leadgendate_on_incoming_leads" on "${sor-db}" using
			{
				"update leads_syfd set leadgen_date=concat(substr(leadgen_date, 1, 10),' ', substr(leadgen_date, 12,8)) where batch_id=${process-id};"
			}
			
			transform as "add_to_customer" on "${sor-db}" using
			{
				"INSERT INTO customer (version, budget, details, email, full_name, lead_campaign, lead_source, leadgen_date, 
				  location, phone_number, profession, vendor_id, z_id, batch_id) 
				  SELECT 0, budget, intent_metadata, email, name, leadsource_campaign, leadsource_channel, leadgen_date, locality, mobile, profession, 20, 35, batch_id  
				  FROM leads_syfd where batch_id=${process-id};"
			}
			
			transform as "add_to_order" on "${sor-db}" using
			{
				"INSERT INTO order_info ( version, due_date, due_time, paid, state, customer_id, pickup_location_id, z_state, reason, status) 
					SELECT 0, NOW(), NOW(), 0, 0, id, 1, 10, 'VRGN','New' FROM customer WHERE batch_id=${process-id};"
			}
			
			transform as "update_user_mapping" on "${sor-db}" using
			{
					"update customer c inner join agent_location a on c.location=a.location_string 
					set c.user_id=6 WHERE batch_id=${process-id};
					update customer set user_id=6 where user_id is null;
					update customer c inner join user_info u on c.user_id=u.id set c.user_name=u.email;
					update customer c 
					set c.search_input=concat(c.full_name,'#',c.phone_number,'#',c.location,'#None#',c.user_name) 
					where batch_id=${process-id};"
			}
			
			gcontact as "update-google-contact"  
			through-account "${gaccountid}" 
			secured-by "${gprivatekey}" 
			with-key "${p12filepath}" 
			for-project "${gcloud-project-name}" 
			on-behalf-of "${impersonated-user}" 
			from-source "${sor-db}" using
			{
				"SELECT concat('ZIJ-',full_name) as name, email, location, phone_number as mobile from customer where batch_id=${process-id};"   
			} on-condition if  "${runcontact}"=="true"
			
			transform as "create-calendar-event" on "${sor-db}" using
			{
				"INSERT INTO calendar_details (event_interval, event_start, event_end, event_alert_time, event_title, description, event_location, batch_id, updated_date)
				SELECT 0, leadgen_date as event_start, date_add(leadgen_date, interval 1 day) as event_end, time(leadgen_date) as event_alert_time, 
				concat('First call for ', name,'-',mobile) as event_title, intent_metadata as description, targeted_city as event_location, ${process-id}, NOW() 
				FROM leads_syfd where batch_id=${process-id};"				
			}on-condition if  "${runcalendar}"=="true"
			
			gcalendar as "update-google-calendar"  
			through-account "${gaccountid}" 
			secured-by "${gprivatekey}" 
			with-key "${p12filepath}" 
			for-project "${gcloud-project-name}" 
			on-behalf-of "${impersonated-user}" 
			from-source "${sor-db}" using
			{
				"select '${calendarid}' as event_calendar_id, event_interval, event_start, event_end, event_alert_time, event_title, description, event_location from calendar_details where batch_id=${process-id};"   
			} on-condition if  "${runcalendar}"=="true"
			
	}
	catch
	{
			transform as "delete_order_customer" on "${sor-db}" using
			{
				"set foreign_key_checks=0;
				delete from order_info where customer_id in (select id from customer where batch_id=${process-id});
				delete from customer where batch_id=${process-id};"
			}
			
			transform as "delete_systemofrecord" on "${sor-db}" using
			{
				"delete from leads_syfd where batch_id=${process-id};"
			}
			
			transform as "delete_from_calendar" on "${sor-db}" using
			{
				"delete from calendar_details where batch_id=${process-id};"
			}
			
	}
	finally
	{
			
	}
}