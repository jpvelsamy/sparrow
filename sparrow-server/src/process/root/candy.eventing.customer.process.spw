process "candy.eventing.customer.process"
{
	try
	{
			assign as "last_ran_date" source "${audit}" using
			{"
				SELECT end_date FROM eventing_audit where end_date is not null order_by id desc limit 1;
			"}
	
			transform as "add_audit" on "${audit}" using
			{"
				INSERT INTO eventing_audit (start_date, process_id, event_type) VALUES (NOW(), ${process-id},'customer');
			"}  
	
			transform as "generate-text-customer" on "${sor-db}" using
			{"
				CREATE TABLE ${process-id}_sms_data_customer SELECT a.due_date, b.full_name as juno_customer_name, b.phone_number as juno_customer_number, c.name as juno_vendor_name, c.phone_number as juno_vendor_number, 
				c.alternate_number as juno_vendor_number_alt, d.sms_template as text_ from
				order_info a inner join customer b on a.customer_id=b.id left outer join vendor c on b.vendor_id=c.id inner join sms_template d on a.state_string=d.status
				and a.z_state_string=d.z_status where d.template_type='customer' and a.updated_date>date(${last_ran_date.end_date});				
				
			"} on-condition if  "${runtextcustomer}"=="true"
			
			assign as "customer_row_status" source "${sor-db}" using
			{"
				SELECT if(count(*)>0,'true','else') as exists FROM ${process-id}_sms_data_customer;
			"}
			
			abort name="abort_on_nodata" message="" on-condition "if customer_row_status.exists"=="false"
			
			callprocess as "call-smsandcalendar-child-process"
			with-target "candy.eventing.customer.smsandcalendar.childprocess"
			from-file "candy.eventing.customer.smsandcalendar.childprocess.spw"
			using "${sor-db}" for-every 		
			{"
				SELECT ${process-id} as parent-id;
			"}
	}
	catch
	{
		
	}
	finally
	{
			transform as "drop-temp-tables" on "${sor-db}" using
		 	{"
		 		DROP table if exists ${process-id}_sms_data_customer;
		 	"}
		 	
		 	transform as "update-audit" on "${sor-db}" using
			{"
				UPDATE eventing_audit set end_date=NOW() WHERE process_id=${process-id}
			"}  
	}
}