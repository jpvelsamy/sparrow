/*
 * generated by Xtext 2.12.0
 */
package org.etl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.etl.services.SparrowGrammarAccess;
import org.etl.sparrow.Callprocess;
import org.etl.sparrow.Catch;
import org.etl.sparrow.Copydata;
import org.etl.sparrow.Doozle;
import org.etl.sparrow.Dropfile;
import org.etl.sparrow.Expression;
import org.etl.sparrow.FBCLead;
import org.etl.sparrow.Fetch;
import org.etl.sparrow.Finally;
import org.etl.sparrow.GooglecalPUT;
import org.etl.sparrow.LoadCsv;
import org.etl.sparrow.Rest;
import org.etl.sparrow.RestPart;
import org.etl.sparrow.SlackPUT;
import org.etl.sparrow.Sms;
import org.etl.sparrow.SparrowPackage;
import org.etl.sparrow.Transform;
import org.etl.sparrow.TrelloGET;
import org.etl.sparrow.TrelloPUT;
import org.etl.sparrow.Try;
import org.etl.sparrow.Updatedaudit;
import org.etl.sparrow.WriteCsv;

@SuppressWarnings("all")
public class SparrowSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SparrowGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SparrowPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SparrowPackage.CALLPROCESS:
				sequence_Callprocess(context, (Callprocess) semanticObject); 
				return; 
			case SparrowPackage.CATCH:
				sequence_Catch(context, (Catch) semanticObject); 
				return; 
			case SparrowPackage.COPYDATA:
				sequence_Copydata(context, (Copydata) semanticObject); 
				return; 
			case SparrowPackage.DOOZLE:
				sequence_Doozle(context, (Doozle) semanticObject); 
				return; 
			case SparrowPackage.DROPFILE:
				sequence_Dropfile(context, (Dropfile) semanticObject); 
				return; 
			case SparrowPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case SparrowPackage.FBC_LEAD:
				sequence_FBCLead(context, (FBCLead) semanticObject); 
				return; 
			case SparrowPackage.FETCH:
				sequence_Fetch(context, (Fetch) semanticObject); 
				return; 
			case SparrowPackage.FINALLY:
				sequence_Finally(context, (Finally) semanticObject); 
				return; 
			case SparrowPackage.GOOGLECAL_PUT:
				sequence_GooglecalPUT(context, (GooglecalPUT) semanticObject); 
				return; 
			case SparrowPackage.LOAD_CSV:
				sequence_LoadCsv(context, (LoadCsv) semanticObject); 
				return; 
			case SparrowPackage.PROCESS:
				sequence_Process(context, (org.etl.sparrow.Process) semanticObject); 
				return; 
			case SparrowPackage.REST:
				sequence_Rest(context, (Rest) semanticObject); 
				return; 
			case SparrowPackage.REST_PART:
				sequence_RestPart(context, (RestPart) semanticObject); 
				return; 
			case SparrowPackage.SLACK_PUT:
				sequence_SlackPUT(context, (SlackPUT) semanticObject); 
				return; 
			case SparrowPackage.SMS:
				sequence_Sms(context, (Sms) semanticObject); 
				return; 
			case SparrowPackage.TRANSFORM:
				sequence_Transform(context, (Transform) semanticObject); 
				return; 
			case SparrowPackage.TRELLO_GET:
				sequence_TrelloGET(context, (TrelloGET) semanticObject); 
				return; 
			case SparrowPackage.TRELLO_PUT:
				sequence_TrelloPUT(context, (TrelloPUT) semanticObject); 
				return; 
			case SparrowPackage.TRY:
				sequence_Try(context, (Try) semanticObject); 
				return; 
			case SparrowPackage.UPDATEDAUDIT:
				sequence_Updatedaudit(context, (Updatedaudit) semanticObject); 
				return; 
			case SparrowPackage.WRITE_CSV:
				sequence_WriteCsv(context, (WriteCsv) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Callprocess
	 *     Callprocess returns Callprocess
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         target=STRING 
	 *         source=STRING 
	 *         datasource=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_Callprocess(ISerializationContext context, Callprocess semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.CALLPROCESS__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.CALLPROCESS__TARGET));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.CALLPROCESS__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.CALLPROCESS__SOURCE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.CALLPROCESS__DATASOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.CALLPROCESS__DATASOURCE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.CALLPROCESS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.CALLPROCESS__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCallprocessAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCallprocessAccess().getTargetSTRINGTerminalRuleCall_4_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getCallprocessAccess().getSourceSTRINGTerminalRuleCall_6_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getCallprocessAccess().getDatasourceSTRINGTerminalRuleCall_8_0(), semanticObject.getDatasource());
		feeder.accept(grammarAccess.getCallprocessAccess().getValueSelectStatementParserRuleCall_11_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getCallprocessAccess().getConditionExpressionParserRuleCall_14_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Catch returns Catch
	 *
	 * Constraint:
	 *     (name=ID action+=Action*)
	 */
	protected void sequence_Catch(ISerializationContext context, Catch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Copydata
	 *     Copydata returns Copydata
	 *
	 * Constraint:
	 *     (name=STRING source=STRING to=STRING value=SelectStatement condition=Expression)
	 */
	protected void sequence_Copydata(ISerializationContext context, Copydata semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.COPYDATA__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.COPYDATA__SOURCE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.COPYDATA__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.COPYDATA__TO));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.COPYDATA__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.COPYDATA__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCopydataAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCopydataAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getCopydataAccess().getToSTRINGTerminalRuleCall_6_0(), semanticObject.getTo());
		feeder.accept(grammarAccess.getCopydataAccess().getValueSelectStatementParserRuleCall_9_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getCopydataAccess().getConditionExpressionParserRuleCall_12_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Doozle
	 *     Doozle returns Doozle
	 *
	 * Constraint:
	 *     (name=STRING target=STRING on=STRING value=CreateStatement condition=Expression)
	 */
	protected void sequence_Doozle(ISerializationContext context, Doozle semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.DOOZLE__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.DOOZLE__TARGET));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.DOOZLE__ON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.DOOZLE__ON));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.DOOZLE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.DOOZLE__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDoozleAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDoozleAccess().getTargetSTRINGTerminalRuleCall_4_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getDoozleAccess().getOnSTRINGTerminalRuleCall_6_0(), semanticObject.getOn());
		feeder.accept(grammarAccess.getDoozleAccess().getValueCreateStatementParserRuleCall_9_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getDoozleAccess().getConditionExpressionParserRuleCall_12_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Dropfile
	 *     Dropfile returns Dropfile
	 *
	 * Constraint:
	 *     (name=STRING target=STRING condition=Expression)
	 */
	protected void sequence_Dropfile(ISerializationContext context, Dropfile semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.DROPFILE__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.DROPFILE__TARGET));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDropfileAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDropfileAccess().getTargetSTRINGTerminalRuleCall_4_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getDropfileAccess().getConditionExpressionParserRuleCall_6_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     (lhs=STRING operator=Operator rhs=STRING)
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.EXPRESSION__LHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.EXPRESSION__LHS));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.EXPRESSION__RHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.EXPRESSION__RHS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getLhsSTRINGTerminalRuleCall_1_0(), semanticObject.getLhs());
		feeder.accept(grammarAccess.getExpressionAccess().getOperatorOperatorParserRuleCall_2_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getExpressionAccess().getRhsSTRINGTerminalRuleCall_3_0(), semanticObject.getRhs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns FBCLead
	 *     FBCLead returns FBCLead
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         authstore=STRING 
	 *         key=STRING 
	 *         useraccount=STRING 
	 *         source=STRING 
	 *         value=STRING 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_FBCLead(ISerializationContext context, FBCLead semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.FBC_LEAD__AUTHSTORE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.FBC_LEAD__AUTHSTORE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.FBC_LEAD__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.FBC_LEAD__KEY));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.FBC_LEAD__USERACCOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.FBC_LEAD__USERACCOUNT));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.FBC_LEAD__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.FBC_LEAD__SOURCE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.FBC_LEAD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.FBC_LEAD__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFBCLeadAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFBCLeadAccess().getAuthstoreSTRINGTerminalRuleCall_4_0(), semanticObject.getAuthstore());
		feeder.accept(grammarAccess.getFBCLeadAccess().getKeySTRINGTerminalRuleCall_6_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getFBCLeadAccess().getUseraccountSTRINGTerminalRuleCall_8_0(), semanticObject.getUseraccount());
		feeder.accept(grammarAccess.getFBCLeadAccess().getSourceSTRINGTerminalRuleCall_10_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getFBCLeadAccess().getValueSTRINGTerminalRuleCall_13_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getFBCLeadAccess().getConditionExpressionParserRuleCall_16_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Fetch
	 *     Fetch returns Fetch
	 *
	 * Constraint:
	 *     (name=STRING source=STRING value=SelectStatement condition=Expression)
	 */
	protected void sequence_Fetch(ISerializationContext context, Fetch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.FETCH__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.FETCH__SOURCE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.FETCH__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.FETCH__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFetchAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFetchAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getFetchAccess().getValueSelectStatementParserRuleCall_7_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getFetchAccess().getConditionExpressionParserRuleCall_10_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Finally returns Finally
	 *
	 * Constraint:
	 *     (name=ID action+=Action*)
	 */
	protected void sequence_Finally(ISerializationContext context, Finally semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns GooglecalPUT
	 *     GooglecalPUT returns GooglecalPUT
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         authstore=STRING 
	 *         key=STRING 
	 *         useraccount=STRING 
	 *         source=STRING 
	 *         value=STRING 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_GooglecalPUT(ISerializationContext context, GooglecalPUT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.GOOGLECAL_PUT__AUTHSTORE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.GOOGLECAL_PUT__AUTHSTORE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.GOOGLECAL_PUT__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.GOOGLECAL_PUT__KEY));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.GOOGLECAL_PUT__USERACCOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.GOOGLECAL_PUT__USERACCOUNT));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.GOOGLECAL_PUT__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.GOOGLECAL_PUT__SOURCE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.GOOGLECAL_PUT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.GOOGLECAL_PUT__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGooglecalPUTAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGooglecalPUTAccess().getAuthstoreSTRINGTerminalRuleCall_4_0(), semanticObject.getAuthstore());
		feeder.accept(grammarAccess.getGooglecalPUTAccess().getKeySTRINGTerminalRuleCall_6_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getGooglecalPUTAccess().getUseraccountSTRINGTerminalRuleCall_8_0(), semanticObject.getUseraccount());
		feeder.accept(grammarAccess.getGooglecalPUTAccess().getSourceSTRINGTerminalRuleCall_10_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getGooglecalPUTAccess().getValueSTRINGTerminalRuleCall_13_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getGooglecalPUTAccess().getConditionExpressionParserRuleCall_16_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns LoadCsv
	 *     LoadCsv returns LoadCsv
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         source=STRING 
	 *         to=STRING 
	 *         delim=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_LoadCsv(ISerializationContext context, LoadCsv semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.LOAD_CSV__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.LOAD_CSV__SOURCE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.LOAD_CSV__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.LOAD_CSV__TO));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.LOAD_CSV__DELIM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.LOAD_CSV__DELIM));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.LOAD_CSV__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.LOAD_CSV__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLoadCsvAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLoadCsvAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getLoadCsvAccess().getToSTRINGTerminalRuleCall_6_0(), semanticObject.getTo());
		feeder.accept(grammarAccess.getLoadCsvAccess().getDelimSTRINGTerminalRuleCall_8_0(), semanticObject.getDelim());
		feeder.accept(grammarAccess.getLoadCsvAccess().getValueSelectStatementParserRuleCall_11_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getLoadCsvAccess().getConditionExpressionParserRuleCall_14_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Process returns Process
	 *
	 * Constraint:
	 *     (name=STRING try=Try catch=Catch finally=Finally)
	 */
	protected void sequence_Process(ISerializationContext context, org.etl.sparrow.Process semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.PROCESS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.PROCESS__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.PROCESS__TRY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.PROCESS__TRY));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.PROCESS__CATCH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.PROCESS__CATCH));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.PROCESS__FINALLY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.PROCESS__FINALLY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getProcessAccess().getTryTryParserRuleCall_3_0(), semanticObject.getTry());
		feeder.accept(grammarAccess.getProcessAccess().getCatchCatchParserRuleCall_4_0(), semanticObject.getCatch());
		feeder.accept(grammarAccess.getProcessAccess().getFinallyFinallyParserRuleCall_5_0(), semanticObject.getFinally());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RestPart returns RestPart
	 *
	 * Constraint:
	 *     (partName=STRING partData=SelectStatement)
	 */
	protected void sequence_RestPart(ISerializationContext context, RestPart semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.REST_PART__PART_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.REST_PART__PART_NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.REST_PART__PART_DATA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.REST_PART__PART_DATA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRestPartAccess().getPartNameSTRINGTerminalRuleCall_2_0(), semanticObject.getPartName());
		feeder.accept(grammarAccess.getRestPartAccess().getPartDataSelectStatementParserRuleCall_4_0(), semanticObject.getPartData());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Rest
	 *     Rest returns Rest
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         authtoken=STRING 
	 *         url=STRING 
	 *         method=STRING 
	 *         resourcedatafrom=STRING 
	 *         urldata=SelectStatement 
	 *         headerdatafrom=STRING 
	 *         headerdata=SelectStatement 
	 *         postdatafrom=STRING 
	 *         parentName=STRING 
	 *         parentdata=SelectStatement 
	 *         parts+=RestPart* 
	 *         ackdatato=STRING 
	 *         ackdata=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_Rest(ISerializationContext context, Rest semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns SlackPUT
	 *     SlackPUT returns SlackPUT
	 *
	 * Constraint:
	 *     (name=STRING team=STRING channel=STRING value=STRING condition=Expression)
	 */
	protected void sequence_SlackPUT(ISerializationContext context, SlackPUT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.SLACK_PUT__TEAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.SLACK_PUT__TEAM));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.SLACK_PUT__CHANNEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.SLACK_PUT__CHANNEL));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.SLACK_PUT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.SLACK_PUT__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSlackPUTAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSlackPUTAccess().getTeamSTRINGTerminalRuleCall_4_0(), semanticObject.getTeam());
		feeder.accept(grammarAccess.getSlackPUTAccess().getChannelSTRINGTerminalRuleCall_6_0(), semanticObject.getChannel());
		feeder.accept(grammarAccess.getSlackPUTAccess().getValueSTRINGTerminalRuleCall_9_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getSlackPUTAccess().getConditionExpressionParserRuleCall_12_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Sms
	 *     Sms returns Sms
	 *
	 * Constraint:
	 *     (name=STRING target=STRING value=STRING condition=Expression)
	 */
	protected void sequence_Sms(ISerializationContext context, Sms semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.SMS__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.SMS__TARGET));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.SMS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.SMS__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSmsAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSmsAccess().getTargetSTRINGTerminalRuleCall_4_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getSmsAccess().getValueSTRINGTerminalRuleCall_7_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getSmsAccess().getConditionExpressionParserRuleCall_10_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Transform
	 *     Transform returns Transform
	 *
	 * Constraint:
	 *     (name=STRING on=STRING value+=NonSelectStatement condition=Expression)
	 */
	protected void sequence_Transform(ISerializationContext context, Transform semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns TrelloGET
	 *     TrelloGET returns TrelloGET
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         authtoken=STRING 
	 *         key=STRING 
	 *         useraccount=STRING 
	 *         board=STRING 
	 *         target=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_TrelloGET(ISerializationContext context, TrelloGET semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.TRELLO_GET__AUTHTOKEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.TRELLO_GET__AUTHTOKEN));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.TRELLO_GET__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.TRELLO_GET__KEY));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.TRELLO_GET__USERACCOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.TRELLO_GET__USERACCOUNT));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.TRELLO_GET__BOARD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.TRELLO_GET__BOARD));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.TRELLO_GET__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.TRELLO_GET__TARGET));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.TRELLO_GET__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.TRELLO_GET__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrelloGETAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTrelloGETAccess().getAuthtokenSTRINGTerminalRuleCall_4_0(), semanticObject.getAuthtoken());
		feeder.accept(grammarAccess.getTrelloGETAccess().getKeySTRINGTerminalRuleCall_6_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getTrelloGETAccess().getUseraccountSTRINGTerminalRuleCall_8_0(), semanticObject.getUseraccount());
		feeder.accept(grammarAccess.getTrelloGETAccess().getBoardSTRINGTerminalRuleCall_10_0(), semanticObject.getBoard());
		feeder.accept(grammarAccess.getTrelloGETAccess().getTargetSTRINGTerminalRuleCall_12_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getTrelloGETAccess().getValueSelectStatementParserRuleCall_15_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getTrelloGETAccess().getConditionExpressionParserRuleCall_18_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns TrelloPUT
	 *     TrelloPUT returns TrelloPUT
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         authtoken=STRING 
	 *         key=STRING 
	 *         useraccount=STRING 
	 *         list=STRING 
	 *         source=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_TrelloPUT(ISerializationContext context, TrelloPUT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.TRELLO_PUT__AUTHTOKEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.TRELLO_PUT__AUTHTOKEN));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.TRELLO_PUT__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.TRELLO_PUT__KEY));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.TRELLO_PUT__USERACCOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.TRELLO_PUT__USERACCOUNT));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.TRELLO_PUT__LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.TRELLO_PUT__LIST));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.TRELLO_PUT__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.TRELLO_PUT__SOURCE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.TRELLO_PUT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.TRELLO_PUT__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrelloPUTAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTrelloPUTAccess().getAuthtokenSTRINGTerminalRuleCall_4_0(), semanticObject.getAuthtoken());
		feeder.accept(grammarAccess.getTrelloPUTAccess().getKeySTRINGTerminalRuleCall_6_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getTrelloPUTAccess().getUseraccountSTRINGTerminalRuleCall_8_0(), semanticObject.getUseraccount());
		feeder.accept(grammarAccess.getTrelloPUTAccess().getListSTRINGTerminalRuleCall_10_0(), semanticObject.getList());
		feeder.accept(grammarAccess.getTrelloPUTAccess().getSourceSTRINGTerminalRuleCall_12_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getTrelloPUTAccess().getValueSelectStatementParserRuleCall_15_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getTrelloPUTAccess().getConditionExpressionParserRuleCall_18_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Try returns Try
	 *
	 * Constraint:
	 *     (name=ID action+=Action*)
	 */
	protected void sequence_Try(ISerializationContext context, Try semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Updatedaudit
	 *     Updatedaudit returns Updatedaudit
	 *
	 * Constraint:
	 *     (name=STRING logsink=STRING value=SelectStatement condition=Expression)
	 */
	protected void sequence_Updatedaudit(ISerializationContext context, Updatedaudit semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.UPDATEDAUDIT__LOGSINK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.UPDATEDAUDIT__LOGSINK));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.UPDATEDAUDIT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.UPDATEDAUDIT__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUpdatedauditAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getUpdatedauditAccess().getLogsinkSTRINGTerminalRuleCall_4_0(), semanticObject.getLogsink());
		feeder.accept(grammarAccess.getUpdatedauditAccess().getValueSelectStatementParserRuleCall_7_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getUpdatedauditAccess().getConditionExpressionParserRuleCall_10_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns WriteCsv
	 *     WriteCsv returns WriteCsv
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         source=STRING 
	 *         to=STRING 
	 *         delim=STRING 
	 *         value=SelectStatement 
	 *         condition=Expression
	 *     )
	 */
	protected void sequence_WriteCsv(ISerializationContext context, WriteCsv semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.WRITE_CSV__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.WRITE_CSV__SOURCE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.WRITE_CSV__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.WRITE_CSV__TO));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.WRITE_CSV__DELIM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.WRITE_CSV__DELIM));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.WRITE_CSV__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.WRITE_CSV__VALUE));
			if (transientValues.isValueTransient(semanticObject, SparrowPackage.Literals.ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SparrowPackage.Literals.ACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWriteCsvAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getWriteCsvAccess().getSourceSTRINGTerminalRuleCall_4_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getWriteCsvAccess().getToSTRINGTerminalRuleCall_6_0(), semanticObject.getTo());
		feeder.accept(grammarAccess.getWriteCsvAccess().getDelimSTRINGTerminalRuleCall_8_0(), semanticObject.getDelim());
		feeder.accept(grammarAccess.getWriteCsvAccess().getValueSelectStatementParserRuleCall_11_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getWriteCsvAccess().getConditionExpressionParserRuleCall_14_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
}
